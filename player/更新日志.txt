
1、av_strlcpy无法识别
解决：
添加头文件#include "libavutil/avutil.h"
#include"libavutil/avstring.h"
      
2、播放器无法正常缩放
解决：
在video_display函数，也就是每帧播放前，通过SDL_GetWindowSize获取当前窗口大小，得到w,h赋值给rect

3、由于视频的分辨率是在SDL_CreateWindow之后才获取，导致SDL_CreateWindow窗口大小只能预设固定值，若视频分辨率与预设值不同，则播放时会看到出初始窗口一闪而过
解决：
要解决这个问题，只能在创建窗口之前，从AVCodecContext找到视频宽和高，于是干脆新建函数，将初始化工作集中于此，并在得到文件路径之后，窗口创建之前调用该函数；
修改前：
demux_thread通过AVFormatContext找到对应的视频流，并调用了stream_component_open，该函数使用视频流得到了AVCodecContext；
修改后：
新增函数open_input，函数内容：提取demux_thread前部分初始化工作到open_input中，并将stream_component_open的调用转移到open_input函数中；


5、videostate增加了duration成员并在open_input赋值，在video_display增加了打印视频进度语句

6、audio_callback中的pts似乎没有作用。删去

7、decode_video_thread中：

 if((pts = av_frame_get_best_effort_timestamp(pFrame)) != AV_NOPTS_VALUE) {
    } else {
      pts = 0;
    }
改为：if((pts = av_frame_get_best_effort_timestamp(pFrame)) == AV_NOPTS_VALUE) 
      		pts = 0;

8、为什么音频packet和frame是成员变量，视频的却是临时变量（见decode_video_thread）？

9、原思路：当前音频播放时间 = 当前packet的pts + 当前packet解码出的音频帧frame播放时长 - 实际缓冲区未播放的frame数据播放时长
   修改为：当前音频播放时间 = 当前packet的pts + 实际缓冲区已经播放的数据时长
   代码修改：get_audio_clock中，使用pts2替换pts；audio_decode_frame中audio_clock不再加解码帧frame的播放时长

10、audio_decode_frame的while循环最后一行是return，明显while没有意义，改为if
